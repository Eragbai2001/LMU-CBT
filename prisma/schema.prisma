// This is your Prisma schema file
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum Role {
  ADMIN
  USER
}

model User {
  id                String    @id @default(uuid())
  name              String
  email             String    @unique
  password          String?
  resetToken        String?   @unique
  resetTokenExpiry  DateTime?
  createdAt         DateTime  @default(now())
  role              Role      @default(USER)
  avatarStyle       String?
  avatarSeed        String?
  enableAiAssistant Boolean   @default(false)
}

model PracticeTest  {
  id              String            @id @default(cuid())
  title           String
  description     String
  icon            String
  isPopular       Boolean           @default(false)
  questionCount   Int
  testType        String?           @default("objective")
  duration        Int?
  durationOptions Duration[]        @relation("TestDurations")
  yearOptions     Year[]            @relation("TestYears")
  sessions        PracticeSession[]
  questions       Question[]
  results         TestResult[] // Add this line to establish the relation
}

model Duration {
  id        String            @id @default(cuid())
  minutes   Int
  tests     PracticeTest[]    @relation("TestDurations")
  sessions  PracticeSession[]
}

model Year {
  id        String            @id @default(cuid())
  value     Int
  tests     PracticeTest[]    @relation("TestYears")
  sessions  PracticeSession[]
}

model PracticeSession {
  id           String       @id @default(cuid())
  userId       String
  testId       String
  durationId   String?
  yearId       String
  topics       String[]
  startedAt    DateTime     @default(now())

  test         PracticeTest @relation(fields: [testId], references: [id], onDelete: Cascade)
  duration     Duration?    @relation(fields: [durationId], references: [id])
  year         Year         @relation(fields: [yearId], references: [id], onDelete: Cascade)
}

model Question {
  id             String        @id @default(cuid())
  content        String
  options        String[]
  correctAnswer  String?       // Optional for theory questions
  solution       String?
  topic          String?
  test           PracticeTest  @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId         String
  image          String?
  points         Int?
  theoryAnswer   String?       // For theory questions
  yearValue      Int?          // Store the year value directly for filtering
}

model TestResult {
  id                String    @id @default(cuid())
  userId            String
  testId            String
  sessionId         String    // Store the session ID from practice session
  score             Int
  totalQuestions    Int
  correctAnswers    Int
  incorrectAnswers  Int
  skippedQuestions  Int
  timeTaken         String?
  completedAt       DateTime  @default(now())
  answersJson       String    @db.Text  // Store answers as JSON string
  questionDataJson String?
  test              PracticeTest @relation(fields: [testId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([testId])
  @@index([sessionId])
}

model MaintenanceSettings {
  id                 Int      @id @default(autoincrement())
  is_maintenance_mode Boolean  @default(false)
  maintenance_message String   @default("Our site is currently under maintenance. We'll be back soon!")
  updated_at         DateTime @default(now()) @updatedAt

  @@map("maintenance_settings")
}



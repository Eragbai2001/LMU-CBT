generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid())
  name             String
  email            String    @unique
  password         String?
  createdAt        DateTime  @default(now())
  resetToken       String?   @unique
  resetTokenExpiry DateTime?
  role             Role      @default(USER)
  avatarSeed       String?
  avatarStyle      String?
}

model PracticeTest {
  id              String            @id @default(cuid())
  title           String
  description     String
  icon            String
  isPopular       Boolean           @default(false)
  questionCount   Int
  duration        Int?
  testType        String?           @default("objective")
  sessions        PracticeSession[]
  questions       Question[]
  results         TestResult[]
  durationOptions Duration[]        @relation("TestDurations")
  yearOptions     Year[]            @relation("TestYears")
}

model Duration {
  id       String            @id @default(cuid())
  minutes  Int
  sessions PracticeSession[]
  tests    PracticeTest[]    @relation("TestDurations")
}

model Year {
  id       String            @id @default(cuid())
  value    Int
  sessions PracticeSession[]
  tests    PracticeTest[]    @relation("TestYears")
}

model PracticeSession {
  id         String       @id @default(cuid())
  userId     String
  testId     String
  durationId String?
  yearId     String
  startedAt  DateTime     @default(now())
  topics     String[]
  duration   Duration?    @relation(fields: [durationId], references: [id])
  test       PracticeTest @relation(fields: [testId], references: [id], onDelete: Cascade)
  year       Year         @relation(fields: [yearId], references: [id], onDelete: Cascade)
}

model Question {
  id            String       @id @default(cuid())
  content       String
  options       String[]
  correctAnswer String?
  testId        String
  solution      String?
  topic         String?
  image         String?
  points        Int?
  theoryAnswer  String?
  yearValue     Int?
  test          PracticeTest @relation(fields: [testId], references: [id], onDelete: Cascade)
}

model TestResult {
  id               String       @id @default(cuid())
  userId           String
  testId           String
  sessionId        String
  score            Int
  totalQuestions   Int
  correctAnswers   Int
  incorrectAnswers Int
  skippedQuestions Int
  timeTaken        String?
  completedAt      DateTime     @default(now())
  answersJson      String
  questionDataJson String?
  test             PracticeTest @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([testId])
  @@index([sessionId])
}

model MaintenanceSettings {
  id                  Int      @id @default(autoincrement())
  is_maintenance_mode Boolean  @default(false)
  maintenance_message String   @default("Our site is currently under maintenance. We'll be back soon!")
  updated_at          DateTime @default(now()) @updatedAt

  @@map("maintenance_settings")
}

enum Role {
  ADMIN
  USER
}
